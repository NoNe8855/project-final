app:
  host-url: http://localhost:8080
  test-mail: ${APP_TEST_MAIL:jira4jr@gmail.com} # Это свойство может быть специфично для тестов,

  # Если оно нужно, оставь, но для продакшена лучше через переменные окружения.
  templates-update-cache: 5s # Для продакшена это значение может быть больше или кеширование отключено иначе
  mail-sending-props:
    core-pool-size: 8
    max-pool-size: 100

spring:
  # --- JPA / Hibernate для PostgreSQL ---
  jpa:
    show-sql: true # Для отладки; в продакшене обычно false
    open-in-view: false # Хорошая практика
    hibernate:
      ddl-auto: validate # PostgreSQL схема управляется Liquibase, Hibernate только проверяет
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 20
        jdbc.batch_size: 20
        # Для PostgreSQL может понадобиться явно указать диалект, хотя Spring Boot обычно справляется
        # dialect: org.hibernate.dialect.PostgreSQLDialect 

  # --- PostgreSQL Datasource (для DataSourceConfig.java) ---
  datasource:
    postgres: # Префикс для кастомного бина DataSource из DataSourceConfig.java
      url: ${APP_DATASOURCE_URL:jdbc:postgresql://localhost:5432/jira}
      username: ${APP_DATASOURCE_USERNAME}
      password: ${APP_DATASOURCE_PASSWORD}
      driver-class-name: org.postgresql.Driver # Явно указываем драйвер

  # --- Liquibase для PostgreSQL ---
  liquibase:
    changeLog: "classpath:db/changelog.sql"  # Основной Liquibase changelog для PostgreSQL
    enabled: true                           # Liquibase включен для основного приложения
    # Для основного приложения не нужно указывать liquibase.url, user, password здесь,
    # так как Liquibase должен использовать основной DataSource бин,
    # который будет создан из spring.datasource.postgres.* твоим DataSourceConfig.java.
    # Убедись, что postgresDataSource бин в DataSourceConfig помечен @Primary (или является единственным не-тестовым).

  # --- Spring Boot SQL Initializer ---
  sql:
    init:
      mode: never # <--- ПОЛНОСТЬЮ ОТКЛЮЧАЕМ для основного профиля,
        #      так как Liquibase управляет схемой.
        #      Если нужны начальные данные через data.sql (НЕ Liquibase),
        #      тогда здесь будет 'always'/'embedded' и 'data-locations',
      #      а 'schema-locations' должен быть пуст.

  # --- Jackson ---
  jackson:
    visibility:
      field: any
      getter: none
      setter: none
      is-getter: none

  # --- Cache ---
  cache:
    cache-names: users
    caffeine:
      spec: maximumSize=10000,expireAfterAccess=5m # Настройки кеша могут быть другими для продакшена

  # --- OAuth2 ---
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${APP_OAUTH_GITHUB_CLIENT_ID}
            client-secret: ${APP_OAUTH_GITHUB_CLIENT_SECRET}
            scope:
              - email
          google:
            client-id: ${APP_OAUTH_GOOGLE_CLIENT_ID}
            client-secret: ${APP_OAUTH_GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          gitlab:
            client-id: ${APP_OAUTH_GITLAB_CLIENT_ID}
            client-secret: ${APP_OAUTH_GITLAB_CLIENT_SECRET}
            client-name: GitLab
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope: read_user
        provider:
          gitlab: # GitHub и Google провайдеры обычно не требуют явной конфигурации здесь
            authorization-uri: https://gitlab.com/oauth/authorize
            token-uri: https://gitlab.com/oauth/token
            user-info-uri: https://gitlab.com/api/v4/user
            user-name-attribute: email

  # --- Mail ---
  mail:
    host: ${APP_MAIL_HOST:smtp.gmail.com}
    port: ${APP_MAIL_PORT:587}
    username: ${APP_MAIL_USERNAME}
    password: ${APP_MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          starttls:
            enable: true # или ${APP_MAIL_SMTP_STARTTLS_ENABLE:true}
          auth: true     # или ${APP_MAIL_SMTP_AUTH:true}

  # --- Thymeleaf ---
  thymeleaf:
    check-template-location: false # В продакшене обычно true, или настроено иначе
    cache: true                    # В продакшене обычно true для кеширования шаблонов
    # У тебя было app.templates-update-cache, это для dev-режима Thymeleaf

  # --- MVC ---
  mvc:
    throw-exception-if-no-handler-found: true
  web:
    resources:
      add-mappings: false # Обычно true, если используешь статические ресурсы Spring Boot

# --- Logging ---
logging:
  level:
    root: WARN # Для продакшена WARN или INFO
    com.javarush.jira: INFO # или WARN для продакшена
    # org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: DEBUG # Для отладки

# --- Server ---
server:
  forward-headers-strategy: framework # Если за реверс-прокси
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# --- Springdoc OpenAPI ---
springdoc:
  swagger-ui:
    path: /doc